0.認識編程器固件的分割區布局方式

參考資料：
http://wiki.openwrt.org/doc/techref/file_system

｜　ｕ－ｂｏｏｔ　｜　　ｆｉｒｍｗａｒｅ　　　　　　｜　ａｒｔ　　｜
－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－
｜　１２８ｋｂ　　｜　　　　　　　　　　　　　　　　｜　６４ｋｂ　｜
－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－－

路由器的電路板上有一個東西叫EEPROM，網路上的文章如果講到什麼分享器還是路由器有4M flash、8M flash
就是在講這個東西，也可以叫它ROM，你可以直接把它想成是個人電腦上的硬碟
這裡存放著路由器的作業系統，ROM在路由器上並不是絕對read-only的
有以下幾種方式可以寫入它：

方式1
=============================================================
路由器自帶的運行於tcp port 80的網頁操作介面
可以透過該路由器的廠商出廠時預設的網頁操作介面，上傳某個firmware（可以是OpenWRT的factory固件，也可以是原廠的固件）
然後在網頁操作介面上按下「提交」鈕之後，就這麼簡單的更新路由器的固件
這種方法只會修改上圖firmware的部分，不會更動到其他地方
缺點是如果在更新途中斷電了，或是莫名奇妙進度就停在那裡，沒有完整把固件寫入ROM，
那麼很可能路由器就會變成一塊磚磚（brick）
這也算是一個術語，意思是你的路由器就這麼廢掉了，不能再開機，不過也沒那麼嚴重，還是有得救

方式2
=============================================================
強迫路由器進入uboot-console，去抓另一台TFTP服務器上放置的firmware影像檔，然後寫入ROM
透過接上ttl-usb線，一邊是路由器，一邊假設是安裝了Linux作業系統的筆記型電腦，
以tp-link的路由器為例，在minicom（一個運行於Linux系統上的老牌序列數據連線程式）
的serial console出現「Autobooting in 1 seconds」
在這一秒之內，迅速輸入tpl三個英文字母並按下Enter，然後路由器會停止載入kernel，並出現提示符像是ar7240>
這個時候你就可以對路由器直接下指令
值得注意的是，這個時候在路由器和筆記型電腦之間除了那一條相連的ttl-usb線
應該還有一條網路線直接對接著路由器和筆記型電腦
這個時候路由器是TFTP client，而筆記型電腦要充當TFTP Server
然後你透過那條接著的ttl-usb線，在minicom裡對著路由器下指令（細節暫略以後我會講到）
叫路由器去抓TFTP Server上的某個firmware影像檔，例如openwrt-ar71xx-generic-tl-wr841n-v8-squashfs-factory.bin
然後載入RAM，清除flash上面從某個特定位址開始算起，和這個影像檔一樣的大小，
然後再把這個firmware影像檔寫入ROM裡面，這也是常見的解磚（unbrick）方式之一

方式3
=============================================================
在任何一台安裝了Linux系統的電腦上，安裝好bless hex editor（16進制檔案編輯器）
然後照著上面我畫的那個簡單的layout圖，弄出一個所謂的「編程器固件」的，檔案內容都是16進制數據的影像檔
為什麼叫作「編程器固件」呢？因為這個16進制內容的影像檔是要寫到EEPROM裡面的
而編程器固件必須完整包含上圖裡的三個部分：uboot、firmware、art
我們可以使用社群裡其他人寫的uboot（例如pepe2k）
然後firmware當然是用OpenWRT，而art分割區上的資料必須從路由器原來的ROM裡複製出來
這樣子就拼成了一個「編程器固件」，然後我們再用CH341A這樣的可以插在筆記型電腦上的USB接口的燒錄器
把「編程器固件」影像檔燒到EEPROM裡，之後拔下路由器上面那顆舊的，再把這顆燒好的新的EEPROM焊上去

方式4
=============================================================
透過路由器上的JTag接口，不過我不是電子科本科系的，我根本不會用
我看到那麼多規格8-pin、10-pin、12-pin、14-pin、16-pin到底要怎麼接我頭都暈了
不過如果會用的話好像很好用，在OpenWrt官方頁關於TP-Link TL-WR1043ND的這一頁裡
http://wiki.openwrt.org/toh/tp-link/tl-wr1043nd#jtag
關於JTag的使用，你可以看到如果會用JTag，可以直接備份整個flash也就是上面我畫的整個ROM裡的資料
或是只備份其中的uboot區或是只備份中間的firmware區
不過JTag的pin腳數量真的太多了，像我這種硬體門外漢還是不要亂接好了，我超怕接錯什麼然後就把版子燒了
如果只是接ttl-usb，路由器上的電路版頂多就是接RX、TX和GND只接三條，相對簡單的多
OpenWRT官網的tl-wr1043nd的那一頁說不可能使用JTag來解磚，因為沒有寫入flashrom的權限
可是Google關鍵字JTag unbrick一堆頁面都跑出來說可以啊用JTag這樣解磚啊
所以事實還要再查證一下，不過我是不會去用這個功能的啦（懶）

＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊＊

上面是我畫的簡化了之後的分割區layout圖
大致上分成三個部分

u-boot : 
這裡有128 kb的大小，嚴格來說，其中第一個64kb才是u-boot
第二個64kb裡會有該路由器的mac address、model、wps pin等資訊
u-boot可以換掉，例如tp-link官方的u-boot有內建一些功能，像是
